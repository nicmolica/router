#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, asn, networks):
    self.routes = {}
    self.updates = {}
    self.relations = {}
    self.sockets = {}
    self.asn = asn[0]
    self.ip = IPUtils()
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    # TODO
    print("Looking up correct route...")
    outroutes = self.routes
    addr = daddr.split(".")
    for out in self.routes:
      print("Checking " + out + " against " + daddr)
      netmask = self.updates[out][MESG][NMSK].split(".")
      split_out = out.split(".")
      for i in range(0, 4):
        if netmask[i] == "255" and addr[i] != split_out[i]:
          print("Dropping " + out + " from list")
          outroutes.pop(out)
          print("Dropped " + out + " from list")
    print("Valid routes:")
    print(outroutes)
    print("\n\n")
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    # TODO
    outroutes = []
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    # TODO
    outroutes = []
    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    peer = None
    routes = self.lookup_routes(daddr)
    return self.sockets[routes[0]]
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      # TODO
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    return self.sockets[peer] if peer else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    try:
      self.get_route(srcif, packet[DEST]).sendall(json.dumps(packet).encode())
      print("Successfully forwarded data to " + self.routes[packet[DEST]] + "!\n\n")
    except:
      return False
    return True

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def update(self, srcif, packet):
    """ handle update packets """
    # add entry to routing table
    # TODO change this so that it is only added if it is better than what was there before
    self.routes[packet[MESG][NTWK]] = srcif
    # store the packet in case we need it later
    self.updates[packet[MESG][NTWK]] = packet
    # create a modified copy of the packet to update neighbors
    update_packet = packet
    # update_packet[SRCE] = packet[DEST] WRONG
    update_packet[MESG][APTH].append(int(self.asn))
    # update all the neighbors
    for neighbor in self.sockets.keys():
      if neighbor != srcif:
        update_packet[SRCE] = self.ip.get_local_version(neighbor)
        update_packet[DEST] = neighbor
        self.sockets[neighbor].sendall(json.dumps(update_packet).encode())

    # TODO change this so that only the necessary neighbors are updated
    return True

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    return True

  def dump(self, packet):
    """ handles dump table requests """
    table_packet = packet
    table_packet[SRCE] = packet[DEST]
    table_packet[DEST] = packet[SRCE]
    table_packet[TYPE] = "table"
    table_packet[MESG] = json.loads("[]")
    for entry in self.routes:
      table_packet[MESG].append(json.loads("{\"network\" : \"" + entry + "\", \"netmask\" : \"" + \
        self.updates[entry][MESG][NMSK] + "\", \"peer\" : \"" + self.routes[entry] + "\"}"))
    print("Table packet:")
    print(json.dumps(table_packet))
    print("\n\n")
    self.sockets[packet[SRCE]].sendall(json.dumps(table_packet).encode())
    print("Successfully dumped table!")
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    if packet[TYPE] == UPDT:
      print("Requested update to routing table...\n")
      return self.update(srcif, packet)
    elif packet[TYPE] == RVKE:
      return False
    elif packet[TYPE] == DATA:
      print("Requested data forward to " + packet[DEST] + "...\n")
      return self.forward(srcif, packet)
    elif packet[TYPE] == NRTE:
      return False
    elif packet[TYPE] == DUMP:
      print("Requested dump of routing table...\n")
      return self.dump(packet)
    return False

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    print("ERROR!!!")
    # TODO
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

class IPUtils:
  def get_local_version(self, neighbor):
    """ get local IP associated with provided neighbor IP """
    local = list(neighbor)
    local[len(local) - 1] = "1"
    return "".join(local)

  def subnet_to_cidr(self, subnet):
    nums = subnet.split(".")
    bins = [bin(nums[0]), bin(nums[1]), bin(nums[2]), bin(nums[3])]
    cidr = 0
    for num in bins:
      binary = list(num)
      for i in range(2, len(binary)):
        if binary[i] == "1":
          cidr = cidr + 1
    return cidr

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int, nargs=1, help='asn')
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
