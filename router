#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"
NEXT = "next"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, asn, networks):
    self.routes = []
    self.updates = []
    self.revocations = []
    self.aggregations = []
    self.relations = {}
    self.sockets = {}
    self.asn = asn[0]
    self.ip = Utils()
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    outroutes = self.routes.copy()
    addr = daddr.split(".")
    # loop through each route in the table, dropping any that don't lead to daddr
    for i in range(0, len(self.routes)):
      netmask = self.routes[i].copy()[NMSK].split(".")
      split_dest = self.routes[i].copy()[DEST].split(".")
      # loop through each number in the IP, drop the IP if it leads somewhere other than daddr
      for j in range(0, 4):
        if netmask[j] == "255" and addr[j] != split_dest[j]:
          outroutes.remove(self.get_dict(outroutes, self.routes[i].copy()[DEST], DEST))
          break
    return outroutes

  def get_longest_prefix(self, routes):
    """ filter out routes that don't have the longest prefix match length """
    # find the max prefix length from all routes
    longest_prefix = max(map((lambda x: self.ip.subnet_to_cidr(x[NMSK])), routes))
    # filter out all routes that aren't as good as the one with the max prefix
    return list(filter((lambda x: self.ip.subnet_to_cidr(x[NMSK]) == longest_prefix), routes.copy()))

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # find the minimum AS path length from all routes
    min_as_path = min(map((lambda x: len(x[APTH])), routes))
    # filter out any routes with AS paths that aren't as short as the minimum
    return list(filter((lambda x: len(x[APTH]) == min_as_path), routes.copy()))

  def get_highest_preference(self, routes):
    """ select the route(s) with the highest preference """
    # pull out all the localpref values from the routing table and find the max
    max_pref = max(map((lambda x: x[LPRF]), routes))
    # filter out all routes that don't have a localpref as good as the max
    return list(filter((lambda x: x[LPRF] == max_pref), routes.copy()))

  def get_self_origin(self, routes):
    """ select self originating routes """
    # determine if any of the routes are self-originating
    self_origin = True in map((lambda x: x[SORG]), routes)
    if self_origin:
      # if there is at least one self-originating route, return all the self-originating routes
      outroutes = list(filter((lambda x: x[SORG]), routes.copy()))
    else:
      # if there are no self-originating routes, return all the routes
      outroutes = routes.copy()
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: IGP > EGP > UNK """
    # get all the origin routes
    origin_routes = map((lambda x: x[ORIG]), routes)
    if "IGP" in origin_routes:
      # if EGP routes exist, filter out all the others
      return list(filter((lambda x: x[ORIG] == "IGP"), routes.copy()))
    elif "EGP" in origin_routes:
      # if no IGP routes exist but EGP routes exist, filter out all the non-EGP routes
      return list(filter((lambda x: x[ORIG] == "EGP"), routes.copy()))
    else:
      # if no IGP or EGP routes exit, don't filter anything out
      return routes.copy()

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    return list(filter((lambda x: self.relations[srcif] == CUST or self.relations[x[NEXT]] == CUST), routes.copy()))

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    peer = None
    routes = self.lookup_routes(daddr)
    routes = self.get_longest_prefix(routes)
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      last = "255.255.255.255"
      for i in range(0, len(routes)):
        peer = self.ip.least(last, routes[i][NEXT])
        last = routes[i][NEXT]
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
      route = self.get_dict(routes, peer, NEXT)
    return self.sockets[route[NEXT]] if peer and route != None else None

  def forward(self, srcif, packet):
    """ Forward a data packet """
    route = self.get_route(srcif, packet[DEST])
    if route == None:
      return False
    else:
      route.sendall(json.dumps(packet).encode())
      return True

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    for first, second in zip(self.routes.copy(), self.routes.copy()[1:]):
      if self.can_be_coalesced(first, second):
        self.merge(first, second)
    return True

  def merge(self, route1, route2):
    """ merge the two routes into a single entry and store the old routes """
    # add a tuple containing the two old routes to the aggregations list
    self.aggregations.append((route1.copy(), route2.copy()))
    # find the lowest of the two IPs
    least = self.ip.least(route1[DEST], route2[DEST])
    first_is_least = least == route1[DEST]
    # depending which is the least, decrement 1 from its cidr and remove the other from routes
    if first_is_least:
      self.routes = list(filter((lambda x: x != route2), self.routes.copy()))
      for i in range(0, len(self.routes)):
        if self.routes[i] == route1:
          self.routes[i][NMSK] = self.ip.cidr_to_subnet(self.ip.subnet_to_cidr(route1[NMSK]) - 1)
    else:
      self.routes = list(filter((lambda x: x != route1), self.routes.copy()))
      for i in range(0, len(self.routes)):
        if self.routes[i] == route2:
          self.routes[i][NMSK] = self.ip.cidr_to_subnet(self.ip.subnet_to_cidr(route2[NMSK]) - 1)

  def can_be_coalesced(self, route1, route2):
    """ determine if the two routes can be coalesced into a single route """
    are_adjacent = self.ip.are_adjacent(route1[DEST], route2[DEST], route1[NMSK], route2[NMSK])
    same_forward = route1[NEXT] == route2[NEXT]
    same_attributes = route1[LPRF] == route2[LPRF] and route1[SORG] == route2[SORG] and \
      route1[APTH] == route2[APTH] and route1[ORIG] == route2[ORIG]
    return are_adjacent and same_forward and same_attributes

  def update(self, srcif, packet):
    """ handle update packets """
    # add entry to routing table
    self.routes.append({DEST: packet[MESG][NTWK], NEXT: srcif, NMSK: packet[MESG][NMSK], LPRF: int(packet[MESG][LPRF]), \
      SORG: packet[MESG][SORG], APTH: packet[MESG][APTH], ORIG: packet[MESG][ORIG]})
    # store the packet in case we need it later
    self.updates.append(packet.copy())
    # create a modified copy of the packet to update neighbors
    update_packet = packet.copy()
    # update_packet[SRCE] = packet[DEST] WRONG
    update_packet[MESG][APTH].append(int(self.asn))
    # update all the neighbors
    for neighbor in self.sockets.keys():
      is_from_customer = self.relations[srcif] == CUST
      is_to_customer = self.relations[neighbor] == CUST
      neighbor_is_not_sender = neighbor != srcif
      if neighbor_is_not_sender and (is_from_customer or is_to_customer):
        update_packet[SRCE] = self.ip.get_local_version(neighbor)
        update_packet[DEST] = neighbor
        self.sockets[neighbor].sendall(json.dumps(update_packet).encode())

    self.coalesce()
    return True

  def revoke(self, packet):
    """ handle revoke packets """
    self.revocations.append(packet.copy())
    print("Before decoalescing:")
    for route in self.routes:
      print(route)
    for revocation in packet[MESG]:
      self.decoalesce(revocation)
    print("After decoalescing:")
    for route in self.routes:
      print(route)
    print("\n\n")
    for revocation in packet[MESG]:
      self.remove_from_routing_table(revocation[NTWK], packet[SRCE], revocation[NMSK])

    revoke_packet = packet.copy()
    for neighbor in self.sockets.keys():
      is_from_customer = self.relations[packet[SRCE]] == CUST
      is_to_customer = self.relations[neighbor] == CUST
      neighbor_is_not_sender = neighbor != packet[SRCE]
      if neighbor_is_not_sender and (is_from_customer or is_to_customer):
        revoke_packet[SRCE] = self.ip.get_local_version(neighbor)
        revoke_packet[DEST] = neighbor
        self.sockets[neighbor].sendall(json.dumps(revoke_packet).encode())
    return True

  def decoalesce(self, revocation):
    """ decoalesce an entry in the routing table if possible/necessary """
    if self.can_be_decoalesced(revocation[NTWK], revocation[NMSK]):
      # remove the coalesced one
      for route in self.routes:
        # if routes are the same or they are adjacent
        if (route[DEST] == revocation[NTWK] and \
          self.ip.subnet_to_cidr(route[NMSK]) + 1 == self.ip.subnet_to_cidr(revocation[NMSK])) or \
          self.ip.are_adjacent(route[DEST], revocation[NTWK], \
            self.ip.cidr_to_subnet(self.ip.subnet_to_cidr(route[NMSK]) + 1), revocation[NMSK]):
          self.routes.remove(route)
      # add both old ones back in
      for j in range(0, len(self.aggregations)):
        if (self.aggregations[j][0][DEST] == revocation[NTWK] and self.aggregations[j][0][NMSK] == revocation[NMSK]) or \
          (self.aggregations[j][1][DEST] == revocation[NTWK] and self.aggregations[j][1][NMSK] == revocation[NMSK]):
          self.routes.append(self.aggregations[j][0])
          self.routes.append(self.aggregations[j][1])

  def can_be_decoalesced(self, network, netmask):
    """ is the provided network/netmask combo in the list of previous aggregations """
    return True in map((lambda x: (x[0][DEST] == network and x[0][NMSK] == netmask) or \
      (x[1][DEST] == network and x[1][NMSK] == netmask)), self.aggregations.copy())

  def remove_from_routing_table(self, net, src, mask):
    """ Remove all instances of the provided network/netmask combo from the routing table. """
    self.routes = list(filter((lambda x: x[DEST] != net or x[NMSK] != mask or x[NEXT] != src), self.routes))

  def dump(self, packet):
    """ handles dump table requests """
    # copy the packet and modify its fields to make it a table packet
    table_packet = packet.copy()
    table_packet[SRCE] = packet[DEST]
    table_packet[DEST] = packet[SRCE]
    table_packet[TYPE] = "table"
    table_packet[MESG] = json.loads("[]")
    # for each route, add an entry to the msg field of the table packet
    for route in self.routes:
      table_packet[MESG].append(json.loads("{\"network\" : \"" + route[DEST] + "\", \"netmask\" : \"" + \
        route[NMSK] + "\", \"peer\" : \"" + route[NEXT] + "\"}"))
    self.sockets[packet[SRCE]].sendall(json.dumps(table_packet).encode())
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    if packet[TYPE] == UPDT:
      return self.update(srcif, packet)
    elif packet[TYPE] == RVKE:
      return self.revoke(packet)
    elif packet[TYPE] == DATA:
      return self.forward(srcif, packet)
    elif packet[TYPE] == NRTE:
      return False
    elif packet[TYPE] == DUMP:
      return self.dump(packet)
    return False

  def send_error(self, conn, msg, srcif):
    """ Send a no_route error message """
    no_route = msg.copy()
    no_route[TYPE] = NRTE
    no_route[SRCE] = self.ip.get_local_version(srcif)
    no_route[DEST] = msg[SRCE]
    no_route[MESG] = json.loads("{}")
    conn.sendall(json.dumps(no_route).encode())

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg, srcif)
        else:
          return

  def get_dict(self, routes, ip, key):
    """ Return the first element in the routes provided which has a key that matches ip. """
    for route in routes:
      if route[key] == ip:
        return route
    return None

  def get_keys(self):
    """ Get the DEST keys associated with the routing table. """
    return list(map((lambda x: x[DEST]), self.routes.copy()))

class Utils:
  def get_local_version(self, neighbor):
    """ get local IP associated with provided neighbor IP """
    local = list(neighbor)
    local[len(local) - 1] = "1"
    return "".join(local)

  def subnet_to_cidr(self, subnet):
    """ convert subnet mask to cidr """
    nums = subnet.split(".")
    bins = [bin(int(nums[0])), bin(int(nums[1])), bin(int(nums[2])), bin(int(nums[3]))]
    cidr = 0
    for num in bins:
      binary = list(str(num))
      for i in range(2, len(binary)):
        if binary[i] == "1":
          cidr = cidr + 1
    return cidr

  def cidr_to_subnet(self, cidr):
    """ convert cidr to subnet """
    subnet = ""
    for i in range(0, 32):
      if i < cidr:
        subnet = subnet + "1"
      else:
        subnet = subnet + "0"
    bins = [subnet[0:8], subnet[8:16], subnet[16:24], subnet[24:32]]
    decs = list(map(self.binary_to_decimal, bins))
    subnet = decs[0] + "." + decs[1] + "." + decs[2] + "." + decs[3]
    return subnet
    
  def binary_to_decimal(self, binary):
    """ convert binary numbers to decimals """
    bin_int = int(binary)
    decimal = 0
    i = 0
    while bin_int != 0:
        dec = bin_int % 10
        decimal = decimal + dec * pow(2, i) 
        bin_int = bin_int // 10
        i = i + 1
    return str(decimal)

  def least(self, this, that):
    """ return the lower of two IP addresses """
    split_this = this.split(".")
    split_that = that.split(".")
    for i in range(0, 4):
      for j in range(0, 4):
        if int(split_this[i]) > int(split_that[j]):
          return that
        else:
          return this
    return this

  def are_adjacent(self, this, that, this_mask, that_mask):
    """ determine if two IP addresses are numerically adjacent """
    if this_mask != that_mask:
      return False
    split_this = this.split(".")
    split_that = that.split(".")
    if self.subnet_to_cidr(this_mask) > 24:
      return split_this[0] == split_that[0] and split_this[1] == split_that[1] and \
        split_this[2] == split_that[2] and abs(int(split_this[3]) - int(split_that[3])) <= 255
    elif self.subnet_to_cidr(this_mask) > 16:
      return split_this[0] == split_that[0] and split_this[1] == split_that[1] and \
        abs(int(split_this[2]) - int(split_that[2])) <= 255 and split_this[3] == split_that[3]
    elif self.subnet_to_cidr(this_mask) > 8:
      return split_this[0] == split_that[0] and abs(int(split_this[1]) - int(split_that[1])) <= 255 and \
        split_this[2] == split_that[2] and split_this[3] == split_that[3]
    else:
      return abs(int(split_this[0]) - int(split_that[0])) <= 255 and split_this[1] == split_that[1] and \
        split_this[2] == split_that[2] and split_this[3] == split_that[3]

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int, nargs=1, help='asn')
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
